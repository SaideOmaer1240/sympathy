FastHTML é uma biblioteca Python voltada para a criação de aplicações web baseadas em HTML e renderizadas no servidor. Ela utiliza o Starlette e Uvicorn para manipulação de rotas e requisições, HTMX para atualizações de interface e `FastTags` do fastcore para componentes HTML. Essa combinação permite construir interfaces ricas e dinâmicas sem depender de bibliotecas de front-end como React ou Vue.

Diferente do FastAPI, FastHTML não é voltado para serviços de API e enfatiza a renderização de HTML no servidor, oferecendo suporte para CSS (como Pico e Surreal) e integração direta com componentes JS nativos【6†source】.

/home/saide/sympathy/.env
     DB_URL=postgresql://postgres:123456@localhost:5432/sympathy_db
     SECRET_KEY = sua_chave_secreta_super_segura

/home/saide/sympathy/config.py
     from dotenv import load_dotenv
    import os

    load_dotenv()   

    DATABASE_URL = os.getenv("DB_URL")
    SECRET_KEY = os.getenv('SECRET_KEY')

/home/saide/sympathy/alembic.ini
    # A generic, single database configuration.

    [alembic]
    # path to migration scripts
    # Use forward slashes (/) also on windows to provide an os agnostic path
    script_location = alembic

    # template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
    # Uncomment the line below if you want the files to be prepended with date and time
    # see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
    # for all available tokens
    # file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

    # sys.path path, will be prepended to sys.path if present.
    # defaults to the current working directory.
    prepend_sys_path = .

    # timezone to use when rendering the date within the migration file
    # as well as the filename.
    # If specified, requires the python>=3.9 or backports.zoneinfo library.
    # Any required deps can installed by adding `alembic[tz]` to the pip requirements
    # string value is passed to ZoneInfo()
    # leave blank for localtime
    # timezone =

    # max length of characters to apply to the "slug" field
    # truncate_slug_length = 40

    # set to 'true' to run the environment during
    # the 'revision' command, regardless of autogenerate
    # revision_environment = false

    # set to 'true' to allow .pyc and .pyo files without
    # a source .py file to be detected as revisions in the
    # versions/ directory
    # sourceless = false

    # version location specification; This defaults
    # to alembic/versions.  When using multiple version
    # directories, initial revisions must be specified with --version-path.
    # The path separator used here should be the separator specified by "version_path_separator" below.
    # version_locations = %(here)s/bar:%(here)s/bat:alembic/versions

    # version path separator; As mentioned above, this is the character used to split
    # version_locations. The default within new alembic.ini files is "os", which uses os.pathsep.
    # If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.
    # Valid values for version_path_separator are:
    #
    # version_path_separator = :
    # version_path_separator = ;
    # version_path_separator = space
    # version_path_separator = newline
    version_path_separator = os  # Use os.pathsep. Default configuration used for new projects.

    # set to 'true' to search source files recursively
    # in each "version_locations" directory
    # new in Alembic version 1.10
    # recursive_version_locations = false

    # the output encoding used when revision files
    # are written from script.py.mako
    # output_encoding = utf-8
    
    sqlalchemy.url = postgresql://postgres:123456@localhost:5432/sympathy_db



    [post_write_hooks]
    # post_write_hooks defines scripts or Python functions that are run
    # on newly generated revision scripts.  See the documentation for further
    # detail and examples

    # format using "black" - use the console_scripts runner, against the "black" entrypoint
    # hooks = black
    # black.type = console_scripts
    # black.entrypoint = black
    # black.options = -l 79 REVISION_SCRIPT_FILENAME

    # lint with attempts to fix using "ruff" - use the exec runner, execute a binary
    # hooks = ruff
    # ruff.type = exec
    # ruff.executable = %(here)s/.venv/bin/ruff
    # ruff.options = --fix REVISION_SCRIPT_FILENAME

    # Logging configuration
    [loggers]
    keys = root,sqlalchemy,alembic

    [handlers]
    keys = console

    [formatters]
    keys = generic

    [logger_root]
    level = WARN
    handlers = console
    qualname =

    [logger_sqlalchemy]
    level = WARN
    handlers =
    qualname = sqlalchemy.engine

    [logger_alembic]
    level = INFO
    handlers =
    qualname = alembic

    [handler_console]
    class = StreamHandler
    args = (sys.stderr,)
    level = NOTSET
    formatter = generic

    [formatter_generic]
    format = %(levelname)-5.5s [%(name)s] %(message)s
    datefmt = %H:%M:%S

/home/saide/sympathy/alembic/env.py
    from logging.config import fileConfig
    from sqlalchemy import engine_from_config
    from sqlalchemy import pool
    from alembic import context

    # Importar o MetaData dos modelos SQLAlchemy
    from db.models import Bases

    # Configuração do Alembic
    config = context.config

    # Configurar o logging
    if config.config_file_name is not None:
        fileConfig(config.config_file_name)

    # Definir o MetaData para autogeração
    target_metadata = Bases.metadata

    def run_migrations_offline() -> None:
        url = config.get_main_option("sqlalchemy.url")
        context.configure(
            url=url,
            target_metadata=target_metadata,
            literal_binds=True,
            dialect_opts={"paramstyle": "named"},
        )

        with context.begin_transaction():
            context.run_migrations()

    def run_migrations_online() -> None:
        connectable = engine_from_config(
            config.get_section(config.config_ini_section),
            prefix="sqlalchemy.",
            poolclass=pool.NullPool,
        )

        with connectable.connect() as connection:
            context.configure(
                connection=connection,
                target_metadata=target_metadata
            )

            with context.begin_transaction():
                context.run_migrations()

    if context.is_offline_mode():
        run_migrations_offline()
    else:
        run_migrations_online()

/home/saide/sympathy/db/models.py
    from sqlalchemy.orm import declarative_base, sessionmaker, relationship
    from sqlalchemy import create_engine, Column, Integer, String, Date, Time, ForeignKey, DateTime
    from config import DATABASE_URL
    from datetime import datetime, timezone

    engine = create_engine(DATABASE_URL)
    Session = sessionmaker(bind=engine)
    Bases = declarative_base()

    # Definindo os modelos
    class Consultor(Bases):
        __tablename__ = 'Consultor'
        
        id = Column(Integer, primary_key=True, index=True)
        nome = Column(String, nullable=False)
        email = Column(String, unique=True, nullable=False)
        atuacao = Column(String, nullable=False)
        senha = Column(String, nullable=False)
        avaliacoes = relationship("Avaliacao", back_populates="consultor")
        pedidos = relationship("Pedido", back_populates="consultor")
        agendas = relationship("Agenda", back_populates="consultor")  # Adicionada relação com Agenda

        def __repr__(self):
            return f"<Consultor(nome={self.nome}, email={self.email})>"

    class Cliente(Bases):
        __tablename__ = 'Cliente'
        
        id = Column(Integer, primary_key=True, index=True)
        nome = Column(String, nullable=False)
        email = Column(String, unique=True, nullable=False)
        senha = Column(String, nullable=False)
        pedidos = relationship("Pedido", back_populates="cliente")

        def __repr__(self):
            return f"<Cliente(nome={self.nome}, email={self.email})>"

    class Pedido(Bases):
        __tablename__ = 'Pedido'
        
        id = Column(Integer, primary_key=True, index=True)
        consultor_id = Column(Integer, ForeignKey('Consultor.id'), nullable=False)
        cliente_id = Column(Integer, ForeignKey('Cliente.id'), nullable=False)
        status = Column(String, nullable=False)  # "pendente", "aceito", "recusado"
        created_at = Column(DateTime, default=lambda: datetime.now(timezone.utc))  # Data de criação

        consultor = relationship("Consultor", back_populates="pedidos")
        cliente = relationship("Cliente", back_populates="pedidos")
        agenda = relationship("Agenda", back_populates="pedido", uselist=False)

        def __repr__(self):
            return f"<Pedido(consultor_id={self.consultor_id}, cliente_id={self.cliente_id}, status={self.status})>"

    class Agenda(Bases):
        __tablename__ = 'Agenda'
        
        id = Column(Integer, primary_key=True, index=True)
        pedido_id = Column(Integer, ForeignKey('Pedido.id'), nullable=False)
        consultor_email = Column(String, ForeignKey('Consultor.email'), nullable=True)
        assunto = Column(String, nullable=False)  # Nome do assunto da consultoria
        data = Column(Date, nullable=False)
        horario = Column(Time, nullable=False)
        created_at = Column(DateTime, default=lambda: datetime.now(timezone.utc), index=True)  # Data de criação com index
        updated_at = Column(DateTime, default=lambda: datetime.now(timezone.utc), onupdate=lambda: datetime.now(timezone.utc), index=True)  # Data de atualização com index

        pedido = relationship("Pedido", back_populates="agenda")
        consultor = relationship("Consultor", back_populates="agendas")  # Relacionamento com Consultor

        def __repr__(self):
            return f"<Agenda(assunto={self.assunto}, data={self.data}, horario={self.horario})>"

    class Avaliacao(Bases):
        __tablename__ = 'Avaliacao'
        
        id = Column(Integer, primary_key=True, index=True)
        consultor_id = Column(Integer, ForeignKey('Consultor.id'), nullable=False)
        cliente_id = Column(Integer, ForeignKey('Cliente.id'), nullable=False)
        nota = Column(Integer, nullable=False)  # Nota de 1 a 5
        comentario = Column(String, nullable=True)
        created_at = Column(DateTime, default=lambda: datetime.now(timezone.utc))  # Data da avaliação

        consultor = relationship("Consultor", back_populates="avaliacoes")
        cliente = relationship("Cliente")  # Relacionamento apenas para referência

        def __repr__(self):
            return f"<Avaliacao(consultor_id={self.consultor_id}, nota={self.nota})>"

    def init_db():
        Bases.metadata.create_all(engine)

/home/saide/sympathy/app/views.py
        from fasthtml.common import Titled, Tr, Td, P, Button, Form, Table, Th, Thead, Tbody, Fieldset, Input, Label, Div
        from sqlalchemy.exc import IntegrityError  
        from starlette.responses import JSONResponse, RedirectResponse
        from sqlalchemy.exc import IntegrityError
        from db.models import Agenda, Cliente, Consultor, Pedido, Session
        from auth.utils import gerar_token_jwt, hash_senha, verificar_senha 
        from services.notice import enviar_email_notificacao
        from datetime import datetime
        from sqlalchemy import func   
        

        async def obter_agendas_recentes(req):
            session = Session()
            consultor_email = req.state.user["sub"]  # Extrai o e-mail do consultor autenticado

            # Identifica o consultor logado
            consultor = session.query(Consultor).filter(Consultor.email == consultor_email).first()
            if not consultor:
                session.close()
                return []
            print(consultor.nome)

            # Busca as agendas associadas ao consultor, ordenadas pela data de criação, limitando a um número específico, como 5
            agendas = (
                session.query(Agenda)
                .join(Pedido, Agenda.pedido_id == Pedido.id)
                .filter(Pedido.consultor_id == consultor.id)
                .order_by(Agenda.data.desc())
                .limit(5)  # Limita para exibir apenas as 5 agendas mais recentes
                .all()
            )

            # Formata os dados da agenda para serem usados no dashboard
            agenda_list = [
                {
                    "id": agenda.id,
                    "data": agenda.data.strftime("%d/%m/%Y"),
                    "horario": agenda.horario.strftime("%H:%M"),
                    "cliente": agenda.pedido.cliente.nome if agenda.pedido else "N/A"
                }
                for agenda in agendas
            ]

            session.close()
            return agenda_list

        async def contar_agendas_ocupadas(req):
            session = Session()
            consultor_email = req.state.user["sub"]  
            
            # Conta as agendas ocupadas associadas ao consultor autenticado
            count = session.query(Agenda).filter(
                Agenda.pedido_id.isnot(None),
                Agenda.consultor_email == consultor_email
            ).count()
            
            session.close()
            return count

        async def contar_agendas_livres(req):
            session = Session()
            consultor_email = req.state.user["sub"]

            # Conta as agendas que não têm um pedido associado (ou seja, estão livres)
            count = session.query(Agenda).filter(Agenda.pedido_id.is_(None)).count()
            session.close()
            return count

        async def contar_clientes_atendidos(req):
            session = Session()
            consultor_email = req.state.user["sub"]

            # Conta os clientes atendidos por este consultor
            count = session.query(Pedido).filter(Pedido.status == "atendido", Pedido.consultor.has(email=consultor_email)).count()
            session.close()
            return count

        async def contar_pedidos_pendentes(req):
            session = Session()
            consultor_email = req.state.user["sub"]

            # Conta os pedidos de consulta que estão pendentes para este consultor
            count = session.query(Pedido).filter(Pedido.consultor.has(email=consultor_email), Pedido.status == "pendente").count()
            session.close()
            return count

        # Dados do cliente
        async def consultor_info(req):
            consultor_email = req.state.user["sub"]
            session = Session()
            consultor = session.query(Consultor).filter_by(email=consultor_email).first()
            return consultor


        async def cadastrar_consultor(req):
            form_data = await req.form()
            
            nome = form_data.get("nome")
            email = form_data.get("email")
            atuacao = form_data.get("atuacao")
            senha = form_data.get("senha")

            if not nome or not email or not atuacao or not senha:
                return JSONResponse(content={"message": "Todos os campos são obrigatórios."}, status_code=400)

            senha_hashed = hash_senha(senha)

            session = Session()
            consultor = Consultor(nome=nome, email=email, atuacao=atuacao, senha=senha_hashed)
            
            
            try:
                session.add(consultor)
                session.commit()
                return RedirectResponse(url='/consultant', status_code=307)
            except IntegrityError:
                session.rollback()
                return RedirectResponse(url='/exist', status_code=307)
            finally:
                session.close()


        async def cadastrar_cliente(req):
            form_data = await req.form()
            
            nome = form_data.get("nome")
            email = form_data.get("email")
            senha = form_data.get("senha")

            if not nome or not email or not senha:
                return JSONResponse(content={"message": "Todos os campos são obrigatórios."}, status_code=400)

            senha_hashed = hash_senha(senha)

            session = Session()
            cliente = Cliente(nome=nome, email=email, senha=senha_hashed)
            
            try:
                session.add(cliente)
                session.commit()
                return RedirectResponse(url='/client', status_code=307)
                
            except IntegrityError:
                session.rollback()
                return RedirectResponse(url='/exist', status_code=307)
                session.close()


        async def login(req):
            form_data = await req.form()
            email = form_data.get("email")
            senha = form_data.get("senha")

            if not email or not senha:
                return JSONResponse(content={"message": "Todos os campos são obrigatórios."}, status_code=400)

            session = Session()

            # Verifica se o usuário é consultor
            consultor = session.query(Consultor).filter(Consultor.email == email).first()
            if consultor and verificar_senha(senha, consultor.senha):
                token = gerar_token_jwt(email, "consultor")
                
                res = RedirectResponse(url='/connected_as_a_consultant', status_code=303)
                res.set_cookie(key="access_token", value=token, httponly=True) 
                session.close()
                return res

            # Verifica se o usuário é cliente
            cliente = session.query(Cliente).filter(Cliente.email == email).first()
            if cliente and verificar_senha(senha, cliente.senha):
                token = gerar_token_jwt(email, "cliente")
                response = RedirectResponse(url='/dashboard_cliente', status_code=307)
                
                response.set_cookie(key="access_token", value=token, httponly=True)
                session.close()
                return response
                            
            session.close()
            return JSONResponse(content={"message": "Credenciais inválidas."}, status_code=401)


        async def criar_agenda(req):
            form_data = await req.form()
            assunto = form_data.get("assunto")
            data = form_data.get("data")
            horario = form_data.get("horario")

            if not assunto or not data or not horario:
                return JSONResponse(content={"message": "Todos os campos são obrigatórios."}, status_code=400)

            session = Session()
            consultor_email = req.state.user["sub"]  # Extrair email do consultor do token JWT

            # Buscar o consultor
            consultor = session.query(Consultor).filter(Consultor.email == consultor_email).first()
            
            if not consultor:
                session.close()
                return JSONResponse(content={"message": "Consultor não encontrado."}, status_code=404)

            agenda = Agenda(
                pedido_id=None,  # Pode ser associado futuramente
                assunto=assunto,
                data=data,
                horario=horario
            )
            session.add(agenda)
            
            try:
                session.commit()

                # Enviar notificação para o consultor
                mensagem = f"Olá {consultor.nome},\n\nUma nova agenda foi criada:\nAssunto: {assunto}\nData: {data}\nHorário: {horario}\n"
                enviar_email_notificacao(consultor.email, "Nova Agenda Criada", mensagem)

                return JSONResponse(content={"message": "Agenda criada com sucesso!"}, status_code=201)
            except Exception as e:
                session.rollback()
                return JSONResponse(content={"message": "Erro ao criar agenda.", "error": str(e)}, status_code=500)
            finally:
                session.close()

        async def minhas_agendas(req):
            session = Session()
            consultor_email = req.state.user["sub"]  # Email do consultor extraído do token

            # Buscar o consultor logado
            consultor = session.query(Consultor).filter(Consultor.email == consultor_email).first()
            if not consultor:
                session.close()
                return Titled(
                    "Erro",
                    P("Consultor não encontrado.", cls="text-center text-red-500 text-lg")
                )

            # Buscar agendas do consultor
            agendas = session.query(Agenda).filter(Agenda.pedido.has(consultor_id=consultor.id)).all()

            if not agendas:
                session.close()
                return Titled(
                    "Minhas Agendas",
                    P("Nenhuma agenda encontrada.", cls="text-center text-gray-500 text-lg")
                )

            # Gerar tabela de agendas, incluindo o campo "assunto"
            agenda_rows = [
                Tr(
                    Td(a.assunto, cls="p-4 text-gray-700"),
                    Td(str(a.data), cls="p-4 text-gray-600"),
                    Td(str(a.horario), cls="p-4 text-gray-600"),
                    Td(
                        Button(
                            "Editar",
                            hx_get=f"/form_editar_agenda/{a.id}",  # Utiliza HTMX para carregar o formulário de edição
                            hx_target="#main-panel",  # ID do elemento de destino onde o formulário de edição será carregado
                            hx_swap="outerHTML",
                            cls="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-3 rounded"
                        ),
                        cls="text-center"
                    ),
                    Td(
                        Form(
                            method="post",
                            action=f"/eliminar_agenda/{a.id}",
                            hx_post=f"/eliminar_agenda/{a.id}",  # Configuração HTMX para excluir o item
                            hx_target="#main-panel",  # ID do elemento onde a lista de agendas será atualizada
                            hx_swap="outerHTML"
                        )(
                            Button(
                                "Eliminar",
                                type="submit",
                                cls="bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-3 rounded"
                            )
                        ),
                        cls="text-center"
                    )
                ) for a in agendas
            ]


            session.close()

            return Div(
                Button(
                    '▼ Agendas',
                    cls='text-2xl ml-10 font-bold text-purple-700 mb-4',
                    id='toggle-button',
                    onclick="toggleCardsSection('Agendas')"
                ),
                Table(
                    Thead(
                        Tr(
                            Th("Assunto", cls="p-4 border-b-2 border-gray-200 text-left text-gray-800"),
                            Th("Data", cls="p-4 border-b-2 border-gray-200 text-left text-gray-800"),
                            Th("Horário", cls="p-4 border-b-2 border-gray-200 text-left text-gray-800"),
                            Th("Editar", cls="p-4 border-b-2 border-gray-200 text-center text-gray-800"),
                            Th("Eliminar", cls="p-4 border-b-2 border-gray-200 text-center text-gray-800")
                        )
                    ),
                    Tbody(*agenda_rows),
                    cls="min-w-full bg-white rounded-lg shadow-md"
                ),
                cls="p-6 bg-gray-50 rounded-lg shadow-lg", id='main-panel'
            )

        async def buscar_agendas_por_assunto(req):
            form_data = await req.form()
            assunto = form_data.get("assunto")
            
            if not assunto:
                return JSONResponse(content={"message": "Assunto é obrigatório."}, status_code=400)

            session = Session()
            consultor_email = req.state.user["sub"]  # Pega o email do consultor através do token JWT
            
            # Buscar consultor logado
            consultor = session.query(Consultor).filter(Consultor.email == consultor_email).first()
            if not consultor:
                session.close()
                return JSONResponse(content={"message": "Consultor não encontrado."}, status_code=404)

            # Filtrar agendas do consultor pelo assunto
            agendas = session.query(Agenda).filter(Agenda.pedido.has(consultor_id=consultor.id), Agenda.assunto.ilike(f'%{assunto}%')).all()

            if not agendas:
                session.close()
                return JSONResponse(content={"message": "Nenhuma agenda encontrada para o assunto informado."}, status_code=404)

            # Retornar os detalhes das agendas encontradas
            agenda_list = [
                {
                    "id": agenda.id,
                    "assunto": agenda.assunto,
                    "data": str(agenda.data),
                    "horario": str(agenda.horario)
                } for agenda in agendas
            ]
            
            session.close()
            return JSONResponse(content={"agendas": agenda_list}, status_code=200)
        

        async def duplicar_agenda(req, agenda_id: int):
            session = Session()
            consultor_email = req.state.user["sub"]  # Obtém o email do consultor a partir do token JWT

            try:
                # Buscar o consultor logado
                consultor = session.query(Consultor).filter(Consultor.email == consultor_email).first()
                if not consultor:
                    return JSONResponse(content={"message": "Consultor não encontrado."}, status_code=404)

                # Buscar a agenda que o consultor deseja duplicar
                agenda_original = session.query(Agenda).filter(Agenda.id == agenda_id, Agenda.pedido.has(consultor_id=consultor.id)).first()
                if not agenda_original:
                    return JSONResponse(content={"message": "Agenda não encontrada ou não pertence ao consultor."}, status_code=404)

                # Criar uma nova instância da Agenda duplicando os detalhes da original
                nova_agenda = Agenda(
                    pedido_id=agenda_original.pedido_id,  # Mantém o pedido original ou pode ser None
                    assunto=agenda_original.assunto,
                    data=agenda_original.data,
                    horario=agenda_original.horario
                )

                session.add(nova_agenda)
                session.commit()

                return JSONResponse(content={"message": "Agenda duplicada com sucesso!", "nova_agenda_id": nova_agenda.id}, status_code=201)

            except Exception as e:
                session.rollback()
                return JSONResponse(content={"message": "Erro ao duplicar a agenda.", "error": str(e)}, status_code=500)

            finally:
                session.close()

        
        async def listar_agendas_concluidas(req):
            session = Session()
            consultor_email = req.state.user["sub"]  # Extrai o email do consultor do token JWT

            try:
                # Buscar o consultor logado
                consultor = session.query(Consultor).filter(Consultor.email == consultor_email).first()
                if not consultor:
                    return JSONResponse(content={"message": "Consultor não encontrado."}, status_code=404)

                # Buscar todas as agendas do consultor que já passaram da data atual
                agora = datetime.now().date()
                agendas_concluidas = session.query(Agenda).filter(
                    Agenda.pedido.has(consultor_id=consultor.id),
                    Agenda.data < agora
                ).all()

                if not agendas_concluidas:
                    return JSONResponse(content={"message": "Nenhuma agenda concluída encontrada."}, status_code=404)

                # Listar as agendas concluídas
                agenda_list = [
                    {
                        "id": agenda.id,
                        "assunto": agenda.assunto,
                        "data": str(agenda.data),
                        "horario": str(agenda.horario)
                    } for agenda in agendas_concluidas
                ]

                return JSONResponse(content={"agendas_concluidas": agenda_list}, status_code=200)

            except Exception as e:
                return JSONResponse(content={"message": "Erro ao buscar agendas concluídas.", "error": str(e)}, status_code=500)

            finally:
                session.close()


        async def eliminar_agenda(req, agenda_id: int):
            session = Session()
            consultor_email = req.state.user["sub"]  # Email do consultor extraído do token JWT

            try:
                # Buscar o consultor pelo email contido no payload do token JWT
                consultor = session.query(Consultor).filter(Consultor.email == consultor_email).first()
                
                if not consultor:
                    session.close()
                    return JSONResponse(content={"message": "Consultor não encontrado."}, status_code=404)

                # Buscar a agenda pelo ID e verificar se pertence ao consultor via Pedido
                agenda = session.query(Agenda).filter(Agenda.id == agenda_id).first()

                if not agenda or agenda.pedido.consultor_id != consultor.id:
                    return JSONResponse(content={"message": "Agenda não encontrada ou não pertence ao consultor."}, status_code=404)
                
                # Eliminar a agenda
                session.delete(agenda)
                session.commit()

                return JSONResponse(content={"message": "Agenda eliminada com sucesso!"}, status_code=200)
            
            except Exception as e:
                session.rollback()
                return JSONResponse(content={"message": "Erro ao eliminar a agenda.", "error": str(e)}, status_code=500)
            
            finally:
                session.close()

        async def form_editar_agenda(req, agenda_id: int):
            session = Session()
            consultor_email = req.state.user["sub"]

            # Buscar o consultor logado pelo email contido no token
            consultor = session.query(Consultor).filter(Consultor.email == consultor_email).first()

            if not consultor:
                session.close()
                return Titled("Erro", P("Consultor não encontrado."))

            # Buscar a agenda pelo ID e verificar se pertence ao consultor logado
            agenda = session.query(Agenda).filter(Agenda.id == agenda_id, Agenda.pedido.has(consultor_id=consultor.id)).first()

            if not agenda:
                session.close()
                return Titled("Erro", P("Agenda não encontrada."))

            # Retornar o formulário com os dados atuais da agenda, incluindo o campo "assunto"
            session.close()

            return Titled("Editar Agenda",
                Form(method="post", action=f"/atualizar_agenda/{agenda.id}")(
                    Fieldset(
                        Label("Assunto: ", Input(name="assunto", type="text", value=str(agenda.assunto), required=True)),
                        Label("Data: ", Input(name="data", type="date", value=str(agenda.data), required=True)),
                        Label("Horário: ", Input(name="horario", type="time", value=str(agenda.horario), required=True))
                    ),
                    Button("Atualizar Agenda", type="submit")
                )
            )

        async def atualizar_agenda(req, agenda_id: int):
            form_data = await req.form()
            novo_assunto = form_data.get("assunto")
            nova_data = form_data.get("data")
            novo_horario = form_data.get("horario")

            if not novo_assunto or not nova_data or not novo_horario:
                return JSONResponse(content={"message": "Assunto, data e horário são obrigatórios."}, status_code=400)

            session = Session()
            consultor_email = req.state.user["sub"]

            try:
                consultor = session.query(Consultor).filter(Consultor.email == consultor_email).first()
                
                if not consultor:
                    return JSONResponse(content={"message": "Consultor não encontrado."}, status_code=404)

                agenda = session.query(Agenda).filter(Agenda.id == agenda_id, Agenda.pedido.has(consultor_id=consultor.id)).first()
                
                if not agenda:
                    return JSONResponse(content={"message": "Agenda não encontrada ou não pertence ao consultor."}, status_code=404)

                agenda.assunto = novo_assunto
                agenda.data = nova_data
                agenda.horario = novo_horario 

                session.commit()

                # Enviar notificação de atualização
                mensagem = f"Olá {consultor.nome},\n\nSua agenda foi atualizada:\nNovo Assunto: {novo_assunto}\nNova Data: {nova_data}\nNovo Horário: {novo_horario}\n"
                enviar_email_notificacao(consultor.email, "Agenda Atualizada", mensagem)

                return JSO NResponse(content={"message": "Agenda atualizada com sucesso!"}, status_code=200)
            
            except Exception as e:
                session.rollback()
                return JSONResponse(content={"message": "Erro ao atualizar a agenda.", "error": str(e)}, status_code=500)
            
            finally:
                session.close()

        async def template_editar_agenda(req, agenda_id: int):
            session = Session()
            consultor_email = req.state.user["sub"]

            # Buscar o consultor logado pelo email contido no token
            consultor = session.query(Consultor).filter(Consultor.email == consultor_email).first()

            if not consultor:
                session.close()
                return Titled("Erro", P("Consultor não encontrado."))

            # Buscar a agenda pelo ID e verificar se pertence ao consultor logado
            agenda = session.query(Agenda).filter(Agenda.id == agenda_id, Agenda.pedido.has(consultor_id=consultor.id)).first()

            if not agenda:
                session.close()
                return Titled("Erro", P("Agenda não encontrada."))

            # Fechar a sessão
            session.close()

            # Retornar o formulário com os dados atuais da agenda, incluindo o campo "assunto"
            return Titled("Editar Agenda",
                Form(
                    method="post",
                    action=f"/atualizar_agenda/{agenda.id}",
                    cls="space-y-6 bg-white p-6 rounded-lg shadow-lg"
                )(
                    Fieldset(
                        Label(
                            "Assunto:",
                            Input(
                                name="assunto",
                                type="text",
                                value=str(agenda.assunto),
                                required=True,
                                cls="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
                            ),
                            cls="block text-gray-700 font-bold mb-2"
                        ),
                        Label(
                            "Data:",
                            Input(
                                name="data",
                                type="date",
                                value=str(agenda.data),
                                required=True,
                                cls="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
                            ),
                            cls="block text-gray-700 font-bold mb-2"
                        ),
                        Label(
                            "Horário:",
                            Input(
                                name="horario",
                                type="time",
                                value=str(agenda.horario),
                                required=True,
                                cls="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
                            ),
                            cls="block text-gray-700 font-bold mb-2"
                        ),
                        cls="space-y-4"
                    ),
                    Button(
                        "Atualizar Agenda",
                        type="submit",
                        cls="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-lg"
                    )
                )
            )

        async def gerar_relatorio_agendas(req):
            session = Session()
            consultor_email = req.state.user["sub"]  # Obtém o email do consultor do token JWT

            try:
                # Buscar o consultor logado
                consultor = session.query(Consultor).filter(Consultor.email == consultor_email).first()
                if not consultor:
                    return JSONResponse(content={"message": "Consultor não encontrado."}, status_code=404)

                # Contar o número de agendas por assunto
                relatorio_por_assunto = session.query(
                    Agenda.assunto,
                    func.count(Agenda.id).label("total")
                ).filter(Agenda.pedido.has(consultor_id=consultor.id)).group_by(Agenda.assunto).all()

                # Contar o número de agendas por data
                relatorio_por_data = session.query(
                    Agenda.data,
                    func.count(Agenda.id).label("total")
                ).filter(Agenda.pedido.has(consultor_id=consultor.id)).group_by(Agenda.data).all()

                # Construir o relatório
                relatorio = {
                    "por_assunto": [
                        {"assunto": r.assunto, "total": r.total} for r in relatorio_por_assunto
                    ],
                    "por_data": [
                        {"data": str(r.data), "total": r.total} for r in relatorio_por_data
                    ]
                }

                return JSONResponse(content={"relatorio": relatorio}, status_code=200)

            except Exception as e:
                return JSONResponse(content={"message": "Erro ao gerar relatório de agendas.", "error": str(e)}, status_code=500)

            finally:
                session.close()
 

/home/saide/sympathy/components/dashboard/clientes/template.py
    from fasthtml.common import Body, Div, Section, A, Button, I, Span, Ul, Li, H3, P, Form, Input, Label, Script
    from app.viewsClients import buscar_consultores_cliente, listar_historico_consultas_cliente, get_client_info
    from auth.decorators.authorization import autenticar

    @autenticar('cliente')
    async def dashboard_cliente(req):
        # Obtenção de dados
        consultores_disponiveis = await buscar_consultores_cliente(req)   
        historico_consultas = await listar_historico_consultas_cliente(req)
        cliente = await get_client_info(req)

        return Body(
            Section(
                # Sidebar para o cliente
                Div(
                    Div(
                        A("Sympathy", href="#", cls="text-2xl font-bold m-4"),
                        cls="flex justify-between items-center w-full bg-gradient-to-l from-purple-900 to-indigo-800 text-white",
                    ),
                    Ul(
                        Li(
                            A(
                                I(cls="fas fa-search mr-2"), 
                                Span("Buscar Consultores", cls="menu-text"),
                                hx_get="/buscar_consultores_cliente",
                                hx_target="#main-content",
                                hx_swap="innerHTML",
                                cls="sidebar-link flex items-center p-2 text-white hover:bg-purple-600"
                            )
                        ),
                        Li(
                            A(
                                I(cls="fas fa-history mr-2"), 
                                Span("Histórico de Consultas", cls="menu-text"),
                                hx_get="/listar_historico_consultas_cliente",
                                hx_target="#main-content",
                                hx_swap="innerHTML",
                                cls="sidebar-link flex items-center p-2 text-white hover:bg-purple-600"
                            )
                        ),
                        cls="space-y-4",
                        id="sidebar-menu"
                    ),
                    cls="sidebar fixed top-0 md:relative md:top-auto left-0 w-64 h-full bg-gradient-to-l from-purple-900 to-indigo-800 text-white transition-transform transform -translate-x-full md:translate-x-0",
                    id="sidebar"
                ),
                
                # Área Principal do Dashboard do Cliente
                Div(
                    Div(
                        P(cliente.nome, cls="text-base font-bold m-4 items-end"),
                        A("Painel do Cliente", href="#", cls="text-2xl font-bold m-4 items-end"),
                        Button("☰", cls="text-white m-4 text-3xl md:hidden", onclick="toggleSidebar()", id="menu-toggle"),
                        cls="flex justify-between items-center w-full bg-gradient-to-l from-purple-900 to-indigo-800 text-white",
                    ),
                    
                    # Formulário de Pesquisa de Consultores
                    Div(
                        H3("Buscar Consultores", cls="text-2xl ml-10 font-bold text-purple-700 mb-4"),
                        Form(
                            Div(
                                Label("Nome ou Área de Atuação:", cls="block text-gray-700 font-bold"),
                                Input(type="text", name="termo", placeholder="Digite o nome ou área de atuação", cls="w-full p-2 mb-4 border rounded"),
                                Label("Avaliação Mínima:", cls="block text-gray-700 font-bold"),
                                Input(type="number", name="avaliacao_minima", placeholder="1 a 5", min="1", max="5", step="0.1", cls="w-full p-2 mb-4 border rounded"),
                                Label("Apenas Disponíveis:", cls="block text-gray-700 font-bold"),
                                Input(type="checkbox", name="apenas_disponiveis", cls="mb-4"),
                                Button("Buscar", type="submit", cls="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded", hx_post="/buscar_consultores",  hx_target="#cards-section",  hx_trigger="click", hx_swap="outerHTML"   ),  method="POST", action="/buscar_consultores", cls="p-6 bg-white shadow rounded-lg"
                        )),
                        Div(
                            consultores_disponiveis, cls="mt-4"
                        ), id='cards-section'
                    ),
                    
                    # Seção de Histórico de Consultas
                    Div(
                        Button('▼ Histórico de Consultas', cls='text-2xl ml-10 font-bold text-purple-700 mb-4', id='toggle-button', onclick="toggleCardsSection('Histórico de Consultas')"),
                        Div(
                            *[
                                Div(
                                    P(f"Data: {consulta['data']}", cls="text-gray-500"),
                                    P(f"Consultor: {consulta['consultor']}", cls="text-gray-700"),
                                    P(f"Status: {consulta['status']}", cls="text-gray-700"),
                                    cls="p-4 bg-white shadow-md rounded-lg mb-4"
                                ) for consulta in historico_consultas
                            ],
                            cls="px-8 py-4 overflow-auto",
                            style="height: 20rem",
                            id="agenda-list"
                        ),
                    ),
                    cls="w-full main bg-gray-100",
                    id="main"
                ),
                cls="flex fixed flex-col md:h-full md:flex-row w-full top-0"
            ),
            Script(src='static/js/toggle/agendasRecents.js'),
            Script(src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"),
            Script(src='static/js/toggle/toggleSidebar.js')
        )

 /home/saide/sympathy/app/viewsClients.py
    from fasthtml.common import Titled, P, Button, Ul, Li, Div 
    from db.models import Cliente, Consultor, Pedido, Avaliacao, Agenda, Session  
    from auth.decorators.goodcookies import goodcookies
    from sqlalchemy import or_, func
    from starlette.responses import JSONResponse  

    # Função para fazer pedido de consultoria
    async def fazer_pedido_consulta(req, consultor_id: int):

        # Debug: Verificar se o consultor_id foi recebido corretamente
        print("consultor_id recebido do cookie:", consultor_id)

        # Se o consultor_id não estiver presente, retornar um erro
        if not consultor_id:
            return Titled("Erro", P("Consultor ID não encontrado nos cookies."))

        # Extraindo o cliente_email do JWT
        cliente_email = req.state.user["sub"]  # Cliente logado extraído do JWT

        session = Session()
        cliente = session.query(Cliente).filter(Cliente.email == cliente_email).first()

        if not cliente:
            session.close()
            return Titled("Erro", P("Cliente não encontrado."))

        try:
            # Criar o pedido de consultoria com o consultor_id e cliente_id
            pedido = Pedido(consultor_id=consultor_id, cliente_id=cliente.id, status="pendente")
            session.add(pedido)
            session.commit()

            session.close()
            return Titled("Sucesso", P("Pedido de consultoria enviado com sucesso!"))
        except Exception as e:
            session.rollback()
            session.close()
            return Titled("Erro", P(f"Ocorreu um erro ao criar o pedido: {str(e)}"))

    # Função para buscar consultores com filtros
    async def buscar_consultores(req):
        form_data = await req.form()
        termo_pesquisa = form_data.get("termo")  # Termo para busca por nome ou área de atuação
        avaliacao_minima = form_data.get("avaliacao_minima")  # Filtro de avaliação mínima
        apenas_disponiveis = form_data.get("apenas_disponiveis")  # Filtro de disponibilidade

        session = Session()

        # Query base para buscar consultores
        query = session.query(Consultor).filter(
            or_(
                Consultor.nome.ilike(f'%{termo_pesquisa}%'),
                Consultor.atuacao.ilike(f'%{termo_pesquisa}%')
            )
        )

        # Filtro por avaliação mínima
        if avaliacao_minima:
            query = query.join(Avaliacao).group_by(Consultor.id).having(func.avg(Avaliacao.nota) >= avaliacao_minima)

        # Filtro de disponibilidade (consultores com agenda disponível)
        if apenas_disponiveis:
            query = query.outerjoin(Agenda).filter(Agenda.id == None)  # Consultores sem agenda vinculada

        consultores = query.all()
        session.close()

        if not consultores:
            return Titled("Nenhum consultor encontrado.")

        # Gerar a lista de consultores em HTML
        consultores_html = Ul(*[
            Li(f"{consultor.nome} - {consultor.atuacao}",
                hx_get=f"/detalhes_consultor/{consultor.id}",
                hx_target="#detalhes-consultor",
                hx_swap="outerHTML"
            ) for consultor in consultores
        ])

        return Titled("Lista de Consultores", consultores_html)

    # Função para exibir os detalhes do consultor
    async def detalhes_consultor(req, consultor_id: int):
        session = Session()

        # Definir cookie com consultor_id para futuras interações
        response = JSONResponse(content={"message": "Armazenamento realizado com sucesso!", "consultor ID": consultor_id})
        response.set_cookie(key="consultor_id", value=str(consultor_id), httponly=True)  # Corrigido para garantir o valor correto

        # Buscar consultor pelo ID
        consultor = session.query(Consultor).filter(Consultor.id == consultor_id).first()
        session.close()

        if not consultor:
            return Titled("Erro", P("Consultor não encontrado."), status_code=404)

        # Retornar os detalhes do consultor em HTML
        detalhes_html = Div(
            P(f"Nome: {consultor.nome}"),
            P(f"Área de Atuação: {consultor.atuacao}"),
            Button("Solicitar Consultoria", hx_post=f"/fazer_pedido_consulta/{consultor.id}", hx_trigger="click" )
        )

        return Titled("Detalhes do Consultor", detalhes_html)

/home/saide/sympathy/components/dashboard/consultores/template.py
     from fasthtml.common import Body, Div, Section, A, Button, I, Span, Ul, Li, H3, P, Script
    from app.views import contar_agendas_livres, contar_agendas_ocupadas, contar_clientes_atendidos, contar_pedidos_pendentes, obter_agendas_recentes, consultor_info
    from auth.decorators.authorization import autenticar

    @autenticar('consultor')
    async def dashboard(req):
        # Obtenção de dados
        agendas_ocupadas = await contar_agendas_ocupadas(req)
        agendas_livres = await contar_agendas_livres(req)
        clientes_atendidos = await contar_clientes_atendidos(req)
        pedidos_consulta = await contar_pedidos_pendentes(req)
        agendas_recentes = await obter_agendas_recentes(req)
        consultor = await consultor_info(req)

        return Body(
            Section(
                # Sidebar
                Div(
                    Div(
                        A("Sympathy", href="#", cls="text-2xl font-bold m-4"),
                        cls="flex justify-between items-center w-full bg-gradient-to-l from-purple-900 to-indigo-800 text-white",
                    ),
                    Ul(
                        Li(
                            A(
                                I(cls="fas fa-calendar-plus mr-2"), 
                                Span("Agendas", cls="menu-text"),
                                hx_get="/minhas_agendas",
                                hx_target="#main-panel",
                                hx_swap="outerHTML",
                                cls="sidebar-link flex items-center p-2 text-white hover:bg-purple-600"
                            )
                        ),
                        Li(
                            A(
                                I(cls="fas fa-calendar-check mr-2"), 
                                Span("Agendas Ocupadas", cls="menu-text"),
                                hx_get="/minhas_agendas?ocupadas=true",
                                hx_target="#main-content",
                                hx_swap="innerHTML",
                                cls="sidebar-link flex items-center p-2 text-white hover:bg-purple-600"
                            )
                        ),
                        Li(
                            A(
                                I(cls="fas fa-user-md mr-2"), 
                                Span("Pedidos de Consulta", cls="menu-text"),
                                hx_get="/listar_pedidos_consulta",
                                hx_target="#main-content",
                                hx_swap="innerHTML",
                                cls="sidebar-link flex items-center p-2 text-white hover:bg-purple-600"
                            )
                        ),
                        cls="space-y-4",
                        id="sidebar-menu"
                    ),
                    cls="sidebar fixed top-0 md:relative md:top-auto left-0 w-64 h-full bg-gradient-to-l from-purple-900 to-indigo-800 text-white transition-transform transform -translate-x-full md:translate-x-0",
                    id="sidebar"
                ),
                
                # Área Principal
                Div(
                    Div(
                        P(consultor.nome, cls="text-base font-bold m-4 items-end" ),
                        A("Painel de Consultor", href="#", cls="text-2xl font-bold m-4 items-end"),
                        Button("☰", cls="text-white m-4 text-3xl md:hidden", onclick="toggleSidebar()", id="menu-toggle"),
                        cls="flex justify-between items-center w-full bg-gradient-to-l from-purple-900 to-indigo-800 text-white",
                    ),
                    
                    # Seção de Estatísticas
                    Div(
                        Div(
                            P("Agendas Ocupadas", cls="text-gray-500"),
                            H3(str(agendas_ocupadas), cls="text-3xl font-bold text-gray-900"),
                            cls="p-6 bg-white shadow rounded-lg"
                        ),
                        Div(
                            P("Agendas Livres", cls="text-gray-500"),
                            H3(str(agendas_livres), cls="text-3xl font-bold text-gray-900"),
                            cls="p-6 bg-white shadow rounded-lg"
                        ),
                        Div(
                            P("Clientes Atendidos", cls="text-gray-500"),
                            H3(str(clientes_atendidos), cls="text-3xl font-bold text-gray-900"),
                            cls="p-6 bg-white shadow rounded-lg"
                        ),
                        Div(
                            P("Pedidos de Consulta Pendentes", cls="text-gray-500"),
                            H3(str(pedidos_consulta), cls="text-3xl font-bold text-gray-900"),
                            cls="p-6 bg-white shadow rounded-lg"
                        ),
                        cls="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4",
                        id="cards-section"
                    ),
                    
                    # Seção de Agendas Recentes com botão de alternância
                    Div(
                        Button('▼ Agendas Recentes', cls='text-2xl ml-10 font-bold text-purple-700 mb-4', id='toggle-button', onclick="toggleCardsSection('Agendas Recentes')"),
                        Div(
                            *[
                                Div(
                                    P(f"Data: {agenda['data']}", cls="text-gray-500"),
                                    P(f"Horário: {agenda['horario']}", cls="text-gray-700"),
                                    P(f"Cliente: {agenda['cliente']}", cls="text-gray-700"),
                                    Button("Ver Detalhes", hx_get=f"/detalhes_agenda/{agenda['id']}", hx_target="#main-content", hx_swap="innerHTML", cls="text-white bg-blue-500 hover:bg-blue-700 px-4 py-2 rounded mt-2"),
                                    cls="p-4 bg-white shadow-md rounded-lg mb-4"
                                ) for agenda in agendas_recentes
                            ],
                            cls="px-8 py-4 overflow-auto",
                            style="height: 20rem",
                            id="agenda-list"
                        ), id='main-panel'
                    ),
                    cls="w-full main bg-gray-100",
                    id="main"
                ),
                cls="flex fixed flex-col md:h-full md:flex-row w-full top-0"
            ),
            Script(src='static/js/toggle/agendasRecents.js'),
            Script(src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"),
            Script(src='static/js/toggle/toggleSidebar.js')
        )



 /home/saide/sympathy/components/head/template.py   

/home/saide/sympathy/components/hero/template.py
    from fasthtml.common import Div, H1, I, H3,  P, Button, Span, Ul, Li, A,  H2, H3, Nav, Ul, Li, P, A, Form, Input, Button, Script

    # Navbar
    def Navbar():
        return Nav(
            Div(
                Div(
                        A("Sympathy", href="#", cls="text-2xl font-bold m-4"),
                        
                        cls="flex justify-between items-center w-full bg-gradient-to-l from-purple-900 to-indigo-800 text-white",),
                    
                    Ul(
                        Li(
                            A(
                                I(cls="fas fa-lightbulb mr-2"),  # Ícone de ideia adicionado
                                Span("Home", cls="menu-text"), 
                                hx_get="/", hx_target='#body', hx_swap='outerHTML', 
                                cls="sidebar-link flex items-center p-2 text-white hover:bg-purple-600"
                            )
                        ),
                        Li(
                            A(
                                I(cls="fas fa-lightbulb mr-2"),  # Ícone de ideia adicionado
                                Span("Login", cls="menu-text"), 
                                hx_get="/form_login", hx_target='#hero', hx_swap='outerHTML', 
                                cls="sidebar-link flex items-center p-2 text-white hover:bg-purple-600"
                            )
                        ),
                        Li(
                            A(
                                I(cls="fas fa-lightbulb mr-2"),  # Ícone de ideia adicionado
                                Span("Cadastre-se como Consultor", cls="menu-text"), 
                                hx_get="/form_cadastrar_consultor", hx_target='#hero', hx_swap='outerHTML', 
                                cls="sidebar-link flex items-center p-2 text-white hover:bg-purple-600"
                            )
                        ),
                        Li(
                            A(
                                I(cls="fas fa-lightbulb mr-2"),  # Ícone de ideia adicionado
                                Span("Cadastre-se como cliente", cls="menu-text"), 
                                hx_get="/form_cadastrar_cliente", hx_target='#hero', hx_swap='outerHTML', 
                                cls="sidebar-link flex items-center p-2 text-white hover:bg-purple-600"
                            )
                        ), 
                        cls="space-y-4", id="sidebar-menu"
                    ),
                    cls="sidebar fixed top-0 md:hidden md:top-auto left-0 w-64 h-full bg-gradient-to-l from-purple-900 to-indigo-800 text-white transition-transform transform -translate-x-full md:translate-x-0", id="sidebar"
                ),

    
            Div(
                Div(
                    A("Sympathy", href="#", cls="text-2xl font-bold text-white"),
                    
                    # Ícone do menu para dispositivos móveis
                    A("☰", href="#", cls="text-white text-3xl md:hidden", onclick="toggleSidebar()", id="menu-toggle"),

                    # Menu completo, oculto em telas menores e mostrado em telas grandes
                    Ul(
                        Li(A("Home", hx_get="/", hx_target='#body', hx_swap='outerHTML', cls="text-gray-300 hover:text-white hover:shadow-md transition duration-300")),
                        Li(A("Consultores", href="#", cls="text-gray-300 hover:text-white hover:shadow-md transition duration-300")),
                        Li(A("Login", hx_get="/form_login", hx_target='#hero', hx_swap='outerHTML', cls="text-gray-300 hover:text-white hover:shadow-md transition duration-300")),
                        Li(A("Contato", href="#", cls="text-gray-300 hover:text-red hover:shadow-md transition duration-300")),
                        cls="hidden md:flex space-x-6 pr-10"  # Oculto em telas pequenas (md:hidden), mostrado em médias ou maiores (md:flex)
                ),


                    cls="flex justify-between items-center w-full"
                ),
                cls="bg-blue-900 py-6 px-8 shadow-lg w-full"
            ), 
            cls='w-full fixed top-0 z-10'
        )

    # Hero Section
    def HeroSection():
        return Div(
            Div(
                H1("Encontre os Melhores Consultores para Suas Necessidades", 
                cls="text-5xl font-bold text-white mb-4 animate-fade-in lg:mr-20 md:mr-10 sm:mr-4"),
                P("Plataforma que conecta clientes a profissionais qualificados.",
                cls="text-lg text-gray-300 mb-8"),
                Div(
                    A("Cadastre-se como Consultor", hx_get="/form_cadastrar_consultor", hx_target='#hero', hx_swap='outerHTML',  
                    cls="bg-white text-indigo-600 px-6 py-3 rounded-full font-semibold hover:bg-gray-200 transition duration-300"),
                    A("Encontre um Consultor", hx_get="/form_cadastrar_cliente", 
                    hx_target='#hero', hx_swap='outerHTML',   cls="ml-4 bg-indigo-500 text-white px-6 py-3 rounded-full font-semibold hover:bg-indigo-700 transition duration-300"),
                    cls="flex justify-center space-x-4"
                ),
                cls="text-center"
            ),
            Script(src='static/js/toggle/agendasRecents.js'),
            Script(src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"),
            Script(src='static/js/toggle/toggleSidebar.js' ),

            cls="bg-gradient-to-r from-gray-900 to-indigo-800 h-screen flex items-center justify-center w-full", id='hero',  
        )

    # Cards Section
    def CardsSection():
        cards = [
            {"title": "Consultoria de TI", "description": "Especialistas em tecnologia para otimizar seu negócio."},
            {"title": "Consultoria Financeira", "description": "Gerenciamento financeiro e contabilidade."},
            {"title": "Consultoria em Marketing", "description": "Estrategistas para aumentar sua presença no mercado."}
        ]
        
        return Div(
            H2("Nossos Consultores", cls="text-3xl font-bold text-center my-10 text-gray-800"),
            Div(
                *[Card(card["title"], card["description"]) for card in cards],
                cls="flex flex-wrap justify-center space-x-4 space-y-6 md:space-y-0 md:space-x-8"  # Ajustes no espaçamento e flex-wrap
            ),
            cls="py-16 bg-gray-100"
        )

    def Card(title, description):
        return Div(
            Div(
                H3(title, cls="text-xl font-semibold mb-4"),
                P(description, cls="text-gray-700 mb-4"),
                A("Saiba Mais", href="#", cls="text-indigo-600 font-semibold hover:underline"),
                cls="p-6 bg-white rounded-lg shadow-lg hover:shadow-2xl transition-transform transform hover:scale-105 hover:bg-gray-50"
            ),
            cls="w-full sm:w-1/2 md:w-1/3 lg:w-1/4 mb-6"  # Classes responsivas para definir colunas
        )

    # Footer
    def Footer():
        return Div(
            P("© 2024 Plataforma de Consultores. Todos os direitos reservados.",
            cls="text-center text-gray-600 py-4"),
            cls="bg-gray-900"
        )

    def buscar_consultores_div():
        return Div(
                Form(
                    Div(
                        Input(type="text", name="area_atuacao", placeholder="Área de Atuação", cls="border p-2 mb-4"),
                        Button("Buscar", type="submit", cls="bg-blue-500 text-white p-2 rounded"),
                        cls="flex flex-col"
                    ),
                    method="POST"
                ),
                cls="flex justify-center items-center h-screen bg-gray-100"
            )

/home/saide/sympathy/components/head/template.py
    from fasthtml.common import Head, Meta, Link, Title, Script
    def head():
        return Head(
                Meta(name="viewport", content="width=device-width, initial-scale=1.0"),
                Meta(charset="UTF-8"),
                Title("Sympathy"),
                Link(href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css", rel="stylesheet"),
                Link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"),

                Link(href="static/css/styles.css", rel="stylesheet"),
                
                Script("""
                    function toggleMenu() {
                        var sidebar = document.getElementById("sidebar");
                        sidebar.classList.toggle("hidden");
                    }
                """, type="text/javascript"),
    
                Script(src='https://unpkg.com/htmx.org@2.0.2', integrity="sha384-Y7hw+L/jvKeWIRRkqWYfPcvVxHzVzn5REgzbawhxAuQGwX1XWe70vji+VSeHOThJ" ,crossorigin="anonymous"),
            )

/home/saide/sympathy/components/exceptions/message.py
    from fasthtml.common import Div, H1, Script, A
    def notice(msg, url1=None, actionName1=None, url2=None, actionName2=None):
        return Div(
            Div(
                H1(f"{msg}", 
                cls="text-5xl font-bold text-white mb-4 animate-fade-in lg:mr-20 md:mr-10 sm:mr-4"),
                Div(
                    A(f"{actionName1 if actionName1 is not None else ''}", hx_get=f"{url1}", hx_target='#hero', hx_swap='outerHTML',  
                    cls="bg-white text-indigo-600 px-6 py-3 rounded-full font-semibold hover:bg-gray-200 transition duration-300"),
                    A(f"{ actionName2 if actionName2 is not None else '' }", hx_get=f"{url2}", 
                    hx_target='#hero', hx_swap='outerHTML',   cls="ml-4 bg-indigo-500 text-white px-6 py-3 rounded-full font-semibold hover:bg-indigo-700 transition duration-300"),
                    cls="flex justify-center space-x-4"
                ),
                cls="text-center"
            ),
            Script(src='static/js/toggle/agendasRecents.js'),
            Script(src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"),
            Script(src='static/js/toggle/toggleSidebar.js' ),

            cls="bg-gradient-to-r from-gray-900 to-indigo-800 h-screen flex items-center justify-center w-full", id='hero',  
        )

/home/saide/sympathy/app/templates/forms.py
    from fasthtml.common import Titled, Fieldset, Form, Label, Input, Button, Tr, Td, Table, Thead, Tbody, Tr, Th, Td, Div, P, H1, A , Span

    def template_cliente():
        return Div(
            H1("Cadastro de Clientes", cls="text-3xl font-bold text-center mb-6"),
            Form(
                Div(
                    Label("Nome: ", cls="block text-sm font-medium text-gray-700"),
                    Input(type="text", name="nome", required=True, cls="border border-gray-300 p-3 rounded w-full mb-4 focus:outline-none focus:ring-2 focus:ring-green-500"),
                    cls="mb-4"
                ),
                Div(
                    Label("Email: ", cls="block text-sm font-medium text-gray-700"),
                    Input(type="email", name="email", required=True, cls="border border-gray-300 p-3 rounded w-full mb-4 focus:outline-none focus:ring-2 focus:ring-green-500"),
                    cls="mb-4"
                ),
                Div(
                    Label("Senha: ", cls="block text-sm font-medium text-gray-700"),
                    Input(type="password", name="senha", required=True, cls="border border-gray-300 p-3 rounded w-full mb-4 focus:outline-none focus:ring-2 focus:ring-green-500"),
                    cls="mb-4"
                ),
                Button("Cadastrar", type="submit", cls="bg-green-500 text-white py-3 px-6 rounded-full hover:bg-green-600 transition-all duration-300"),
                method="POST", action="/cadastrar_cliente", cls="space-y-4"
            ),
            Div(
                P("Possui uma conta?", cls="text-center mt-4"),
                Div(
                    A("Login", hx_get="/form_login", hx_target='#forms', hx_swap='#outerHTML', cls="text-green-500 hover:underline mx-2"),
                    Span("|", cls="mx-2"),
                    A("Cadastre-se como Consultor", hx_get="/form_cadastrar_consultor", hx_target='#forms', hx_swap='outerHTML', cls="text-green-500 hover:underline mx-2"),
                    cls="text-center"
                ),
                cls="mt-6"
            ),
            cls="container mx-auto max-w-lg mt-20 p-6 bg-white shadow-md rounded-lg", id='forms'
        )

    def template_consultor():
        return Div(
            H1("Cadastro de Consultores", cls="text-3xl font-bold text-center mb-6"),
            Form(
                Div(
                    Label("Nome: ", cls="block text-sm font-medium text-gray-700"),
                    Input(type="text", name="nome", required=True, cls="border border-gray-300 p-3 rounded w-full mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"),
                    cls="mb-4"
                ),
                Div(
                    Label("Email: ", cls="block text-sm font-medium text-gray-700"),
                    Input(type="email", name="email", required=True, cls="border border-gray-300 p-3 rounded w-full mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"),
                    cls="mb-4"
                ),
                Div(
                    Label("Área de Atuação: ", cls="block text-sm font-medium text-gray-700"),
                    Input(type="text", name="atuacao", required=True, cls="border border-gray-300 p-3 rounded w-full mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"),
                    cls="mb-4"
                ),
                Div(
                    Label("Senha: ", cls="block text-sm font-medium text-gray-700"),
                    Input(type="password", name="senha", required=True, cls="border border-gray-300 p-3 rounded w-full mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"),
                    cls="mb-4"
                ),
                Button("Cadastrar", type="submit", cls="bg-blue-500 text-white py-3 px-6 rounded-full hover:bg-blue-600 transition-all duration-300"),
                method="POST", action="/cadastrar_consultor", cls="space-y-4"
            ),
            Div(
                P("Possui uma conta?", cls="text-center mt-4"),
                Div(
                    A("Login", hx_get="/form_login", hx_target='#forms', hx_swap='outerHTML', cls="text-blue-500 hover:underline mx-2"),
                    Span("|", cls="mx-2"),
                    A("Cadastre-se como Cliente", hx_get="/form_cadastrar_cliente", hx_target='#forms', hx_swap='outerHTML', cls="text-blue-500 hover:underline mx-2"),
                    cls="text-center"
                ),
                cls="mt-6"
            ),
            cls="container mx-auto max-w-lg mt-20 p-6 bg-white shadow-md rounded-lg", id='forms'
        )

    def template_buscar_consultores():
            return Titled("Buscar Consultores",
                Form(method="post", action="/buscar_consultores", hx_post="/buscar_consultores", hx_target="#lista-consultores")(
                    Fieldset(
                        Label("Nome ou Área de Atuação: ", Input(name="termo", type="text", required=True)),
                        Label("Avaliação Mínima: ", Input(name="avaliacao_minima", type="number", step="0.1", min="1", max="5")),
                        Label("Apenas Disponíveis: ", Input(name="apenas_disponiveis", type="checkbox"))
                    ),
                    Button("Buscar", type="submit")
                ),
                Div(id="lista-consultores", style="margin-top: 20px;")(),  # Onde a lista de consultores será renderizada
                Div(id="detalhes-consultor", style="display:none; margin-top: 20px;")(
                    P("Nome: ", id="consultor-nome"),
                    P("Área de Atuação: ", id="consultor-atuacao"),
                    Button("Solicitar Consultoria", id="btn-solicitar", hx_post="/fazer_pedido_consulta", hx_trigger="click", hx_vals="{consultor_id: consultorId}")
                )
            )
    def template_login():
        return Div(
            H1("Login", cls="text-3xl font-bold text-center mb-6"),
            Form(
                Div(
                    Label("Email: ", cls="block text-sm font-medium text-gray-700"),
                    Input(type="email", name="email", required=True, placeholder="Email", cls="border border-gray-300 p-3 rounded w-full mb-4 focus:outline-none focus:ring-2 focus:ring-indigo-500"),
                    cls="mb-4"
                ),
                Div(
                    Label("Senha: ", cls="block text-sm font-medium text-gray-700"),
                    Input(type="password", name="senha", required=True, placeholder="Senha", cls="border border-gray-300 p-3 rounded w-full mb-4 focus:outline-none focus:ring-2 focus:ring-indigo-500"),
                    cls="mb-4"
                ),
                Button("Entrar", type="submit", cls="bg-indigo-500 text-white py-3 px-6 rounded-full hover:bg-indigo-600 transition-all duration-300"),
                method="POST", action="/login", hx_post='/login', hx_target='#body', hx_swap='outerHTML', cls="space-y-4"
            ),
            Div(
                P("Não possui uma conta?", cls="text-center mt-4"),
                Div(
                    A("Cadastre-se como Consultor", hx_get="/form_cadastrar_consultor", hx_target='#forms', hx_swap='outerHTML', cls="text-indigo-500 hover:underline mx-2"),
                    Span("|", cls="mx-2"),
                    A("Cadastre-se como Cliente", hx_get="/form_cadastrar_cliente", hx_target='#forms', hx_swap='outerHTML', cls="text-indigo-500 hover:underline mx-2"),
                    cls="text-center"
                ),
                cls="mt-6"
            ),
            cls="container mx-auto max-w-lg mt-20 p-6 bg-white shadow-md rounded-lg", id='forms'
        )

    def template_agenda():
        return Titled("Criar Agenda",
            Form(method="post", action="/criar_agenda")(
                Fieldset(
                    Label("Assunto: ", Input(name="assunto", type="text", required=True)),
                    Label("Data: ", Input(name="data", type="date", required=True)),
                    Label("Horário: ", Input(name="horario", type="time", required=True))
                ),
                Button("Criar Agenda", type="submit")
            )
        )
    
    def template_buscar_agenda():
        return Titled("Buscar Agendas",
            Form(method="post", action="/buscar_agenda_por_assunto")(
                Fieldset(
                    Label("Assunto: ", Input(name="assunto", type="text", required=True))
                ),
                Button("Buscar", type="submit")
            )
        )

    

    def gerar_linha_agenda(agenda):
        return Tr(
            Td(agenda.assunto),
            Td(str(agenda.data)),
            Td(str(agenda.horario)),
            Td(Button("Editar", onclick=f"window.location.href='/form_editar_agenda/{agenda.id}'")),
            Td(Form(method="post", action=f"/duplicar_agenda/{agenda.id}")(
                Button("Duplicar", type="submit", style="background-color: blue; color: white;")
            )),
            Td(Form(method="post", action=f"/eliminar_agenda/{agenda.id}")(
                Button("Eliminar", type="submit", style="background-color: red; color: white;")
            ))
        )




    def template_agendas_concluidas(agendas):
        if not agendas:
            return Titled("Histórico de Agendas", "Nenhuma agenda concluída foi encontrada.")

        agenda_rows = [
            Tr(
                Td(agenda["assunto"]),
                Td(agenda["data"]),
                Td(agenda["horario"])
            ) for agenda in agendas
        ]

        return Titled("Histórico de Agendas Concluídas",
            Table(
                Thead(
                    Tr(
                        Th("Assunto"),
                        Th("Data"),
                        Th("Horário")
                    )
                ),
                Tbody(*agenda_rows)
            )
        )

    def template_relatorio_agendas(relatorio):
        # Relatório por assunto
        relatorio_assunto_rows = [
            Tr(Td(item["assunto"]), Td(item["total"])) for item in relatorio["por_assunto"]
        ]

        # Relatório por data
        relatorio_data_rows = [
            Tr(Td(item["data"]), Td(item["total"])) for item in relatorio["por_data"]
        ]

        return Titled("Relatório de Agendas",
            Titled("Por Assunto",
                Table(
                    Thead(Tr(Th("Assunto"), Th("Total"))),
                    Tbody(*relatorio_assunto_rows)
                )
            ),
            Titled("Por Data",
                Table(
                    Thead(Tr(Th("Data"), Th("Total"))),
                    Tbody(*relatorio_data_rows)
                )
            )
        )

/home/saide/sympathy/components/login.py
    from fasthtml.common import Html,Body, Div
    from components.hero.template import Navbar
    from components.head.template import head
    from app.templates.forms import template_login

    def conectar():
        return Html( 
            head(),
        Body(
            Div(
            Navbar(),
            template_login()
            ,
            cls='w-full bg-gradient-to-r from-gray-900 to-indigo-800 h-screen'
        ), id='body', cls='max-h-screen'

            )
            , 
    )

/home/saide/sympathy/static/css/styles.css
    /* Sidebar Responsiva */
    @media(max-width: 500px){
        .sidebar-hidden{
            display: none !important;
        }
    }

    .icon-container {
    transition: margin-left 0.3s; /* Transição suave */
    }

    /* Quando a sidebar estiver minimizada, adicione esta classe */
    .sidebar.-translate-x-full .icon-container {
    margin-left: 200px; /* Ajuste este valor conforme necessário */
    }

    .menu-text {
    transition: opacity 0.3s; /* Transição suave para o texto */
    }

    .menu-icon {
    cursor: pointer;
    position: fixed;
    top: 10px;
    left: 10px;
    z-index: 1000;
    }

    
    #cards-section {
        overflow: hidden;
        height: 0; /* Começa oculto */
    }


    .sidebar-visible {
        display: block !important; /* Mostra o sidebar quando o menu é ativado */
    }

    .sidebar-expanded {
        width: 100% !important; /* Expande a sidebar em mobile para preencher a tela */
    }
    
    @media (max-width: 768px) {
        .esconder-no-movel {
        display: none;
        }
    }
    

    .agenda-list {
        max-height: 60vh !important; /* Limitar a altura das listas de agendas em mobile */
        overflow-y: scroll !important;
    }

    /* Garantir que o botão de menu seja sempre visível */
    .menu-icon {
        font-size: 2rem !important;
        cursor: pointer !important;
    }

    .sidebar-hidden {
        display: none;
    }
    
    .md:sidebar-visible {
        display: block;
    }
    
    .main {
        flex-grow: 1;
    }
    


    .dashboard-grid {
        display: grid;
        grid-template-columns: 1fr; /* Uma coluna por padrão */
        gap: 1rem; /* Espaçamento entre os cards */
    }
    
    .dashboard-grid-md {
        grid-template-columns: repeat(2, 1fr); /* Em telas médias, dois cards por linha */
    }
    
    .dashboard-grid-lg {
        grid-template-columns: repeat(4, 1fr); /* Em telas grandes, quatro cards por linha */
    }
    /* Customizar a barra de rolagem */
    ::-webkit-scrollbar {
        width: 12px !important;
        height: 12px !important;
    }
    
    /* Customizar o fundo da barra de rolagem */
    ::-webkit-scrollbar-track {
        background: #e0e0e0 !important;
    }
    
    /* Customizar o polegar da barra de rolagem */
    ::-webkit-scrollbar-thumb {
        background-color: #4a90e2 !important; /* Azul suave */
        border-radius: 6px !important;
        border: 3px solid #ffffff !important; /* Para adicionar espaçamento e contraste */
    }
    
    /* Mudar cor do polegar ao passar o mouse */
    ::-webkit-scrollbar-thumb:hover {
        background-color: #357ABD !important; /* Azul mais escuro ao hover */
    }
    
    /* Customizar cantos de barra de rolagem */
    ::-webkit-scrollbar-corner {
        background: #f0f0f0 !important;
    }
    
/home/saide/sympathy/static/js/toggle/agendasRecents.js
    // Função para alternar a exibição da seção de agendas recentes
        function toggleCardsSection() {
            var cardsSection = document.getElementById("cards-section");
            var toggleButton = document.getElementById("toggle-button");
            var agendaList = document.getElementById("agenda-list");

            // Se a seção estiver visível, esconda-a
            if (cardsSection.style.height === "" || cardsSection.style.height === "0px") {
                gsap.to(cardsSection, { height: "auto", duration: 0.5, ease: "power2.out" });
                toggleButton.innerHTML = '▲ Agendas Recentes';
                agendaList.style.height = '20rem';
            } else {
                gsap.to(cardsSection, { height: 0, duration: 0.5, ease: "power2.in" });
                toggleButton.innerHTML = '▼ Agendas Recentes';
                agendaList.style.height = 'auto';
            }
        }
    
/home/saide/sympathy/static/js/toggle/toggleSidebar.js
    function toggleSidebar() {
        var sidebar = document.querySelector(".sidebar");
        var menuTextItems = document.querySelectorAll('.menu-text');
        if (sidebar.classList.contains("-translate-x-full")) {
            gsap.to(sidebar, { x: 0, duration: 0.5, ease: "power2.out" });
            sidebar.classList.remove("-translate-x-full");
            // Exibir o texto
            menuTextItems.forEach(item => item.classList.remove('hidden'));
        } else {
            gsap.to(sidebar, { x: -256, duration: 0.5, ease: "power2.in" });
            sidebar.classList.add("-translate-x-full");
            // Ocultar o texto
            menuTextItems.forEach(item => item.classList.add('hidden'));
        }
    }

    

    // Fechar o menu ao clicar em qualquer link
    document.querySelectorAll('.sidebar-link').forEach(link => {
        link.addEventListener('click', () => {
            var sidebar = document.querySelector(".sidebar");
            var menuTextItems = document.querySelectorAll('.menu-text');
            if (!sidebar.classList.contains("-translate-x-full")) {
                gsap.to(sidebar, { x: -256, duration: 0.5, ease: "power2.in" });
                sidebar.classList.add("-translate-x-full");
                // Ocultar o texto
                menuTextItems.forEach(item => item.classList.add('hidden'));
            }
        });
    });   
        
/home/saide/sympathy/app/view_pedidos.py
    from db.models import Pedido, Consultor, Agenda, Session
    from fasthtml.common import Titled, Tr, Td, Button, Table, Thead, Tbody, Th, P
    from starlette.responses import JSONResponse
    from datetime import datetime, timezone

    async def aceitar_pedido(req, pedido_id: int):
        session = Session()
        consultor_email = req.state.user["sub"]  # Email do consultor logado, extraído do token

        try:
            # Buscar o consultor logado
            consultor = session.query(Consultor).filter(Consultor.email == consultor_email).first()
            if not consultor:
                session.close()
                return JSONResponse(content={"message": "Consultor não encontrado."}, status_code=404)

            # Buscar o pedido de consultoria
            pedido = session.query(Pedido).filter(Pedido.id == pedido_id, Pedido.consultor_id == consultor.id).first()
            if not pedido:
                session.close()
                return JSONResponse(content={"message": "Pedido não encontrado."}, status_code=404)

            # Atualizar o status do pedido para "aceito"
            pedido.status = "aceito"
            session.commit()

            # Criar uma agenda para esse pedido
            nova_agenda = Agenda(
                pedido_id=pedido.id, 
                consultor_email=consultor.email,
                assunto=f"Consulta com {pedido.cliente.nome}",  
                data=datetime.now(timezone.utc).date(),  
                horario=datetime.now(timezone.utc).time(),  
                created_at=datetime.now(timezone.utc),
            )
            session.add(nova_agenda)
            session.commit()

            return JSONResponse(content={"message": "Pedido aceito e agenda criada com sucesso!"}, status_code=200)

        except Exception as e:
            session.rollback()
            return JSONResponse(content={"message": f"Erro ao aceitar pedido: {str(e)}"}, status_code=500)
        
        finally:
            session.close()

    async def listar_pedidos(req):
        session = Session()
        consultor_email = req.state.user["sub"]  # Email do consultor logado, extraído do token

        # Buscar o consultor logado
        consultor = session.query(Consultor).filter(Consultor.email == consultor_email).first()
        if not consultor:
            session.close()
            return Titled("Erro", P("Consultor não encontrado."))

        # Buscar todos os pedidos pendentes para esse consultor
        pedidos = session.query(Pedido).filter(Pedido.consultor_id == consultor.id, Pedido.status == "pendente").all()
        
        if not pedidos:
            session.close()
            return Titled("Pedidos de Consultoria", P("Nenhum pedido pendente encontrado."))

        # Construir a tabela de pedidos com botões para aceitar ou recusar
        pedido_rows = [
            Tr(
                Td(f"Cliente: {p.cliente.nome}"),  # Nome do cliente
                Td(f"Data: {p.created_at}"),  # Data do pedido
                Td(Button("Aceitar", onclick=f"window.location.href='/aceitar_pedido/{p.id}'")),
                Td(Button("Recusar", onclick=f"window.location.href='/recusar_pedido/{p.id}'"))
            ) for p in pedidos
        ]

        session.close()

        return Titled("Pedidos de Consultoria",
            Table(
                Thead(
                    Tr(Th("Cliente"), Th("Data"), Th("Aceitar"), Th("Recusar"))
                ),
                Tbody(*pedido_rows)
            )
        )


    async def recusar_pedido(req, pedido_id: int):
        session = Session()
        consultor_email = req.state.user["sub"]  # Email do consultor logado, extraído do token

        try:
            # Buscar o consultor logado
            consultor = session.query(Consultor).filter(Consultor.email == consultor_email).first()
            if not consultor:
                session.close()
                return JSONResponse(content={"message": "Consultor não encontrado."}, status_code=404)

            # Buscar o pedido de consultoria
            pedido = session.query(Pedido).filter(Pedido.id == pedido_id, Pedido.consultor_id == consultor.id).first()
            if not pedido:
                session.close()
                return JSONResponse(content={"message": "Pedido não encontrado."}, status_code=404)

            # Atualizar o status do pedido para "recusado"
            pedido.status = "recusado"
            session.commit()

            return JSONResponse(content={"message": "Pedido recusado com sucesso!"}, status_code=200)

        except Exception as e:
            session.rollback()
            return JSONResponse(content={"message": f"Erro ao recusar pedido: {str(e)}"}, status_code=500)
        
        finally:
            session.close()


/home/saide/sympathy/app/viewsClients.py
     from fasthtml.common import Titled, P, Button, Ul, Li, Div, H3, Form, Label, Input
    from db.models import Cliente, Consultor, Pedido, Avaliacao, Agenda, Session
    from sqlalchemy import or_, func 
    from starlette.responses import JSONResponse

    # Dados do cliente
    async def get_client_info(req):
        cliente_email = req.state.user["sub"]
        session = Session()
        client = session.query(Cliente).filter_by(email=cliente_email).first()
        return client


    # Função para exibir os detalhes do consultor
    async def detalhes_consultor(req, consultor_id: int):
        session = Session()

        # Definir cookie com consultor_id para futuras interações
        response = JSONResponse(content={"message": "Armazenamento realizado com sucesso!", "consultor ID": consultor_id})
        response.set_cookie(key="consultor_id", value=str(consultor_id), httponly=True)

        # Buscar consultor pelo ID
        consultor = session.query(Consultor).filter(Consultor.id == consultor_id).first()
        session.close()

        if not consultor:
            return Titled("Erro", P("Consultor não encontrado.", cls="text-center text-red-500 text-lg"), status_code=404)

        # Retornar os detalhes do consultor em HTML com TailwindCSS
        detalhes_html = Div(
            P(f"Nome: {consultor.nome}", cls="text-lg font-semibold text-gray-800"),
            P(f"Área de Atuação: {consultor.atuacao}", cls="text-md text-gray-600 mb-4"),
            Button(
                "Solicitar Consultoria",
                hx_post=f"/fazer_pedido_consulta/{consultor.id}",
                hx_trigger="click",
                cls="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
            ),
            cls="p-6 bg-white rounded-lg shadow-md"
        )

        return Titled("Detalhes do Consultor", detalhes_html, cls="text-center text-2xl font-bold text-purple-700 mb-6")


    async def buscar_consultores_cliente(req):
        form_data = await req.form()  # Obter dados do formulário
        termo_pesquisa = form_data.get("termo")
        avaliacao_minima = form_data.get("avaliacao_minima")
        apenas_disponiveis = form_data.get("apenas_disponiveis") == "true"

        session = Session()

        # Construir a consulta com filtros
        query = session.query(Consultor).filter(
            or_(
                Consultor.nome.ilike(f'%{termo_pesquisa}%'),
                Consultor.atuacao.ilike(f'%{termo_pesquisa}%')
            )
        )

        if avaliacao_minima:
            query = query.join(Avaliacao).group_by(Consultor.id).having(func.avg(Avaliacao.nota) >= avaliacao_minima)

        if apenas_disponiveis:
            query = query.outerjoin(Agenda).filter(Agenda.id == None)

        consultores = query.all()
        session.close()

        if not consultores:
            return Titled("Nenhum consultor encontrado.", cls="text-center text-gray-500 text-xl font-semibold py-4")

        # Gerar a lista de consultores em HTML com TailwindCSS
        consultores_html = Ul(*[
            Li(
                f"{consultor.nome} - {consultor.atuacao}",
                hx_get=f"/detalhes_consultor/{consultor.id}",
                hx_target="#detalhes-consultor",
                hx_swap="outerHTML",
                cls="p-4 border-b border-gray-300 hover:bg-gray-100 cursor-pointer text-gray-800 font-medium"
            ) for consultor in consultores
        ], id='detalhes-consultor', cls="bg-white shadow-md rounded-lg")

        return Div(
            consultores_html,
            id='cards-section',
            cls="max-w-2xl mx-auto my-8 p-6 bg-gray-50 rounded-lg shadow-lg"
        )
    async def listar_historico_consultas_cliente(req):
        session = Session()
        cliente_email = req.state.user["sub"]
        cliente = session.query(Cliente).filter(Cliente.email == cliente_email).first()

        consultas = session.query(Pedido).filter(Pedido.cliente_id == cliente.id).order_by(Pedido.created_at.desc()).all()
        consulta_list = [
            {"id": consulta.id, "consultor": consulta.consultor.nome, "status": consulta.status, "data": consulta.created_at.strftime("%d/%m/%Y")}
            for consulta in consultas
        ]
        session.close()
        return consulta_list
    
    async def fazer_pedido_consulta(req, consultor_id: int):
        cliente_email = req.state.user["sub"]
        session = Session()
        cliente = session.query(Cliente).filter(Cliente.email == cliente_email).first()

        try:
            pedido = Pedido(consultor_id=consultor_id, cliente_id=cliente.id, status="pendente")
            session.add(pedido)
            session.commit()
            session.close()
            return Titled("Sucesso", P("Pedido de consultoria enviado com sucesso!"))
        except Exception as e:
            session.rollback()
            session.close()
            return Titled("Erro", P(f"Ocorreu um erro ao criar o pedido: {str(e)}"))

    
     
/home/saide/sympathy/auth/utils.py
    from datetime import datetime, timedelta, timezone
    import bcrypt
    import jwt
    from config import SECRET_KEY

    def gerar_token_jwt(email, tipo_usuario):
        payload = {
            "sub": email,
            "role": tipo_usuario,
            "exp": datetime.now(timezone.utc) + timedelta(hours=1)
        }
        return jwt.encode(payload, SECRET_KEY, algorithm="HS256")

    def verificar_token_jwt(token):
        try:
            return jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
        except (jwt.ExpiredSignatureError, jwt.InvalidTokenError):
            return None

    def hash_senha(senha):
        salt = bcrypt.gensalt()
        return bcrypt.hashpw(senha.encode('utf-8'), salt).decode('utf-8')

    def verificar_senha(senha_fornecida, senha_armazenada):
        return bcrypt.checkpw(senha_fornecida.encode('utf-8'), senha_armazenada.encode('utf-8'))

/home/saide/sympathy/auth/decorators/authorization.py
    from functools import wraps
    from starlette.responses import JSONResponse
    from starlette.requests import Request
    from auth.utils import verificar_token_jwt

    def autenticar(role=None):
        def decorator(func):
            @wraps(func)
            async def wrapper(req: Request, *args, **kwargs):
                # Verificar se o token está presente nos cookies
                token = req.cookies.get("access_token")
                if not token:
                    return JSONResponse(content={"message": "Acesso negado: token não encontrado."}, status_code=403)
                
                # Verificar e decodificar o token JWT
                payload = verificar_token_jwt(token)
                if not payload:
                    return JSONResponse(content={"message": "Acesso negado: token inválido."}, status_code=403)
                
                # Se uma role específica for exigida, verificá-la
                if role and payload.get("role") != role:
                    return JSONResponse(content={"message": "Acesso negado: permissão insuficiente."}, status_code=403)
                
                # Armazenar o payload no estado da requisição
                req.state.user = payload
                return await func(req, *args, **kwargs)
            
            return wrapper
        return decorator

/home/saide/sympathy/services/notice.py
    import smtplib
    from email.mime.text import MIMEText
    from email.mime.multipart import MIMEMultipart

    def enviar_email_notificacao(destinatario, assunto, mensagem):
        remetente = "saideomarsaideleon@gmail.com"
        senha = "Damasco121"  # Recomendado usar variáveis de ambiente para segurança

        msg = MIMEMultipart()
        msg['From'] = remetente
        msg['To'] = destinatario
        msg['Subject'] = assunto

        corpo = MIMEText(mensagem, 'plain')
        msg.attach(corpo)

        try:
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            server.login(remetente, senha)
            server.sendmail(remetente, destinatario, msg.as_string())
            server.quit()
            print(f"E-mail enviado para {destinatario} com sucesso!")
        except Exception as e:
            print(f"Erro ao enviar e-mail: {str(e)}")

/home/saide/sympathy/main.py
    from fasthtml.common import *
    from auth.decorators.authorization import autenticar 
    from db.models import init_db
    from app.views import atualizar_agenda, cadastrar_cliente, cadastrar_consultor, criar_agenda, eliminar_agenda, minhas_agendas, template_editar_agenda, login, buscar_agendas_por_assunto, duplicar_agenda, listar_agendas_concluidas, gerar_relatorio_agendas
    from app.view_pedidos import aceitar_pedido, listar_pedidos, recusar_pedido
    from app.templates.forms import template_agenda, template_cliente,template_consultor, template_login, template_buscar_agenda, template_buscar_consultores
    from components.hero.template import HeroSection, CardsSection, Navbar
    from app.viewsClients import buscar_consultores, detalhes_consultor, fazer_pedido_consulta
    from components.dashboard.consultores.template import dashboard
    from components.dashboard.clientes.template import dashbord as area_client
    from components.head.template import head
    from components.login import conectar
    from components.exceptions.message import notice

    # Criar todas as tabelas no banco de dados
    init_db()

    # Inicialização do aplicativo FastHTML
    app, rt = fast_app() 
    # Página inicial
    @app.get("/")
    async def homepage():
        return Html( 
            head(),
            
        Body(
            Div(
            
            # Navbar
            Navbar(),
            
            # Hero Section
            HeroSection(),
            
            # Cards Section
            CardsSection(),
            
            # Footer
            Footer(),
            cls='w-full bg-gradient-to-r from-gray-900 to-indigo-800 h-screen'
        ), id='body', cls='max-h-screen'

            )
            , 
    )


    # Formulário de Cadastro de Consultor (Front-End)
    @rt("/form_cadastrar_consultor")
    def form_cadastrar_consultor():
        return template_consultor()

    # Rota para Cadastro de Consultor  (Back-End)
    @rt("/cadastrar_consultor", methods=["POST"])
    async def route_consultor(req):
        return await cadastrar_consultor(req)   

    # Formulário de Cadastro de Cliente (Front-End)
    @rt("/form_cadastrar_cliente")
    def form_cadastrar_cliente():
        return template_cliente()

    # Rota para Cadastro de Cliente (Back-End)
    @rt("/cadastrar_cliente", methods=["POST"])
    async def rota_cliente(req):
        return await cadastrar_cliente(req)

    # Formulário de Login (Front-End)
    @rt("/form_login")
    def form_login():
        return template_login()

    # Função de login para consultores e clientes (Back-End)
    @rt("/login", methods=["POST"])
    async def route_login(req):
        return await login(req)

    # Função para redirecionar consultor pre-logado
    @rt("/connected_as_a_consultant") 
    async def consultor_logado(req):
        return await dashboard(req)

    # Função para redirecionar o usuario para login apos o cadastro
    @rt("/consultant")
    async def connect():
        return conectar()

    # Função para redirecionar o usuario para login apos o cadastro
    @rt("/client")
    @autenticar(role='cliente')
    async def connect(req):
        return await area_client(req)

    # Rota para apresentar mensagem caso o email já foi usado
    @rt('/exist')
    async def exit_email_con():
        return notice(msg='Email já cadastrado.', url1='/consultant', actionName1='Conectar-se como consultor', url2='/client',actionName2='Conectar-se como cliente')

    # Função de dashboard para consultores 
    @rt("/dashboard_consultor")
    @autenticar(role='consultor')
    async def dashboards(req):
        return await dashboard(req)

    # Função de dashboard para clientes 
    @rt("/dashboard_cliente")
    @autenticar(role='cliente')
    async def cliente(req):
        return await area_client(req)


    # Formulário para Criar Agenda (Front-End)
    @rt("/form_criar_agenda")
    def form_criar_agenda():
        return template_agenda()

    # Rota para Criar Agenda (Back-End)
    @rt("/criar_agenda", methods=["POST"])
    @autenticar(role='consultor')
    async def rota_criar_agenda(req): 
        return await criar_agenda(req)

    # Rota para listar as agendas do consultor logado e retornar em HTML
    @rt("/minhas_agendas", methods=["GET"])
    @autenticar(role='consultor')
    async def rota_agendas(req):
        return await minhas_agendas(req)

    # Formulário para buscar agendas
    @rt("/form_buscar_agenda")
    @autenticar(role='consultor')  # Apenas consultores podem buscar agendas
    def form_buscar_agenda():
        return template_buscar_agenda()

    # Função backend para processar a busca
    @rt("/buscar_agenda_por_assunto", methods=["POST"])
    @autenticar(role='consultor')
    async def rota_buscar_agenda(req):
        return await buscar_agendas_por_assunto(req)



    # Rota para eliminar uma agenda do consultor logado 
    @rt("/eliminar_agenda/{agenda_id}", methods=["POST"]) 
    @autenticar(role="consultor")
    async def rota_eliminar_agenda(req, agenda_id: int):
        return await eliminar_agenda(req, agenda_id)

    # Rota para atualizar uma agenda do consultor logado
    @rt("/atualizar_agenda/{agenda_id}", methods=["POST"]) 
    @autenticar(role='consultor')
    async def rota_atualizar_agenda(req, agenda_id: int):
    return await atualizar_agenda(req, agenda_id)

    # Formulário para Editar Agenda
    @rt("/form_editar_agenda/{agenda_id}")
    @autenticar(role='consultor')
    async def form_editar_agenda(req, agenda_id: int):
    return await template_editar_agenda(req, agenda_id)

    # Rota para duplicar uma agenda do consultor logado
    @rt("/duplicar_agenda/{agenda_id}", methods=["POST"])
    @autenticar(role='consultor')
    async def rota_duplicar_agenda(req, agenda_id: int):
        return await duplicar_agenda(req, agenda_id)

    # Rota para listar agendas concluídas do consultor logado
    @rt("/historico_agendas", methods=["GET"])
    @autenticar(role='consultor')
    async def rota_historico_agendas(req):
        return await listar_agendas_concluidas(req)


    # Rota para gerar o relatório de agendas do consultor logado
    @rt("/relatorio_agendas", methods=["GET"])
    @autenticar(role='consultor')
    async def rota_relatorio_agendas(req):
        return await gerar_relatorio_agendas(req)

    # Rota HTMX para buscar consultores
    @rt("/buscar_consultores", methods=["POST"])
    @autenticar(role='cliente')  # Apenas clientes podem buscar consultores
    async def rota_buscar_consultores(req):
        return await buscar_consultores(req)

    # Rota HTMX para ver detalhes de consultor
    @rt("/detalhes_consultor/{consultor_id}", methods=["GET"])
    @autenticar(role='cliente')  # Apenas clientes podem visualizar detalhes
    async def rota_detalhes_consultor(req, consultor_id: int):
        return await detalhes_consultor(req, consultor_id)

    # Rota HTMX para fazer pedido de consultoria
    @rt("/fazer_pedido_consulta/{consultor_id}", methods=["POST"])
    @autenticar(role='cliente')  # Apenas clientes podem fazer pedidos de consultoria
    async def rota_fazer_pedido(req, consultor_id : int):
        return await fazer_pedido_consulta(req, consultor_id)
    
    # Rota que exibe o formulário de busca de consultores (Frontend)
    @rt("/form_buscar_consultores")
    @autenticar(role='cliente')  # Apenas clientes podem buscar consultores
    async def form_buscar_consultores(req):  # Adicione o parâmetro 'req'
        return template_buscar_consultores()

    # Rota para listar pedidos pendentes
    @rt("/listar_pedidos", methods=["GET"])
    @autenticar(role='consultor')
    async def rota_listar_pedidos(req):
        return await listar_pedidos(req)

    # Rota para aceitar um pedido
    @rt("/aceitar_pedido/{pedido_id}", methods=["GET"])
    @autenticar(role='consultor')
    async def rota_aceitar_pedido(req, pedido_id: int):
        return await aceitar_pedido(req, pedido_id)

    # Rota para recusar um pedido
    @rt("/recusar_pedido/{pedido_id}", methods=["GET"])
    @autenticar(role='consultor')
    async def rota_recusar_pedido(req, pedido_id: int):
        return await recusar_pedido(req, pedido_id)

    serve()